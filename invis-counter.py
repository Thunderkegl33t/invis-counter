from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import re
import unicodedata

TOKEN = '7333435842:AAH5Kb5jk2QO-ocoTLDR_DFHn1vfk3ZQdNI'  # ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather

total_sum = 0

def clean_spaces(s):
    return ''.join(ch if not unicodedata.category(ch).startswith('Z') else ' ' for ch in s)

def normalize_amount(raw):
    raw = re.sub(r'[\s\u00A0\u202F\u2009\u2007\xa0]', '', raw)
    if '.' in raw and ',' in raw and raw.find('.') < raw.find(','):
        raw = raw.replace('.', '').replace(',', '.')
    elif ',' in raw and '.' in raw and raw.find(',') < raw.find('.'):
        raw = raw.replace(',', '')
    elif ',' in raw and '.' not in raw:
        raw = raw.replace(',', '.')
    try:
        return int(round(float(raw)))
    except:
        return 0

def extract_amount(text):
    text = clean_spaces(text)

    # ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if "–æ—Ç–º–µ–Ω" in text.lower():
        return 0

    lines = text.splitlines()

    # ‚úÖ PAYNET
    paynet_match = re.search(r'Tranzaksiya\s+summasi:\s*([\d\s.,]+)', text, re.IGNORECASE)
    if paynet_match:
        return normalize_amount(paynet_match.group(1))

    # ‚úÖ CLICK
    if '+998' in text and len(lines) >= 5:
        match = re.search(r'([\d\s.,]+)', lines[4])
        if match:
            return normalize_amount(match.group(1))

    # ‚úÖ CardXabar, Humo
    match = re.search(r'[+‚ûï]\s*([\d\s.,]+)', text)
    if match:
        return normalize_amount(match.group(1))

    # ‚úÖ Payme
    for line in lines:
        if '—Å—É–º' in line.lower() and '+998' not in line and '+' not in line:
            match = re.search(r'([\d\s.,]+)', line)
            if match:
                return normalize_amount(match.group(1))

    return 0

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global total_sum
    text = update.message.text

    if text == "/total":
        await total(update, context)
        return
    elif text == "/reset":
        await reset(update, context)
        return
    elif text == "üìã –ú–µ–Ω—é":
        await start(update, context)
        return

    amount = extract_amount(text)
    if amount > 0:
        total_sum += amount
        await update.message.reply_text(f"{amount:,}".replace(",", " "))
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É.")

async def total(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global total_sum
    await update.message.reply_text(f"–û–±—â–∞—è —Å—É–º–º–∞: {total_sum:,}".replace(",", " "))
    total_sum = 0
    await update.message.reply_text("üîÑ –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω.")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global total_sum
    total_sum = 0
    await update.message.reply_text("üîÑ –°—É–º–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["/total", "/reset"], ["üìã –ú–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üëã –ü–µ—Ä–µ—Å—ã–ª–∞–π —Å—é–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç CardXabar, Humo, Payme, Click, Paynet.\n"
        "–°—É–º–º—ã –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/total ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—É–º–º—É\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å –≤—Ä—É—á–Ω—É—é",
        reply_markup=reply_markup
    )

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("total", total))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
